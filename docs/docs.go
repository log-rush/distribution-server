// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "email": "contact@fabiankachlock.dev"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/log-rush/distribution-server/blob/main/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/batch": {
            "post": {
                "description": "add a bunch of logs at once to a stream",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "log"
                ],
                "summary": "push multiple logs at once",
                "operationId": "batch",
                "parameters": [
                    {
                        "description": "batch some logs",
                        "name": "Payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.LogBatchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http_common.SuccessResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http_common.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/http_common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http_common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/info": {
            "get": {
                "description": "get all server information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "get the server info",
                "operationId": "info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.InfoResponse"
                        }
                    }
                }
            }
        },
        "/log": {
            "post": {
                "description": "add a new log on a logstream",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "log"
                ],
                "summary": "push a log",
                "operationId": "log",
                "parameters": [
                    {
                        "description": "send a log",
                        "name": "Payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.LogRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http_common.SuccessResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http_common.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/http_common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http_common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/meta/plugins": {
            "get": {
                "description": "get info about the used plugins",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "get activates plugins",
                "operationId": "meta-plugins",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.PluginsResponse"
                        }
                    }
                }
            }
        },
        "/stream/register": {
            "post": {
                "description": "create a new logstream on the server so that client can subscribe to it",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logstream"
                ],
                "summary": "register a logstream",
                "operationId": "register-stream",
                "parameters": [
                    {
                        "description": "information about the logstream to create",
                        "name": "Payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.LogStreamWithSecretResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/http_common.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/http_common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http_common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stream/unregister": {
            "post": {
                "description": "delete a logstream an close all open connection to it",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logstream"
                ],
                "summary": "unregister a logstream",
                "operationId": "unregister-stream",
                "parameters": [
                    {
                        "description": "information about the logstream to unregister",
                        "name": "Payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.UnregisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http_common.SuccessResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_common.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http_common.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/http_common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http_common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/streams": {
            "get": {
                "description": "get all available logstreams on the server",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logstream"
                ],
                "summary": "list all streams",
                "operationId": "list-stream",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.LogStreamsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http_common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/streams/{id}": {
            "get": {
                "description": "get info about a logstream",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logstream"
                ],
                "summary": "fetch a stream",
                "operationId": "get-stream",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.LogStreamResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http_common.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http_common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http_common.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "http.InfoResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "http.LogBatchRequest": {
            "type": "object",
            "required": [
                "logs",
                "stream"
            ],
            "properties": {
                "logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.LogBatchSingleLog"
                    }
                },
                "stream": {
                    "type": "string"
                }
            }
        },
        "http.LogBatchSingleLog": {
            "type": "object",
            "properties": {
                "log": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "http.LogRequest": {
            "type": "object",
            "required": [
                "stream"
            ],
            "properties": {
                "log": {
                    "type": "string"
                },
                "stream": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "http.LogStreamResponse": {
            "type": "object",
            "properties": {
                "alias": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "http.LogStreamWithSecretResponse": {
            "type": "object",
            "properties": {
                "alias": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            }
        },
        "http.LogStreamsResponse": {
            "type": "object",
            "properties": {
                "streams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.LogStreamResponse"
                    }
                }
            }
        },
        "http.PluginsResponse": {
            "type": "object",
            "properties": {
                "routerPlugins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "http.RegisterRequest": {
            "type": "object",
            "required": [
                "alias"
            ],
            "properties": {
                "alias": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            }
        },
        "http.UnregisterRequest": {
            "type": "object",
            "required": [
                "id",
                "key"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            }
        },
        "http_common.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "http_common.SuccessResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        }
    },
    "tags": [
        {
            "description": "all endpoints for logstreams",
            "name": "logstream"
        },
        {
            "description": "all endpoints for logs",
            "name": "log"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:7000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "log-rush-distribution-server",
	Description:      "this is a log-rush log distribution server",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
